{

  // Set to true if all requests should generate a maintenance notice
  maintenanceMode: false,

  // We mostly use relative URLs, but sometimes a qualified URL is required.
  // Must terminate with /
  qualifiedURL: 'https://lib.reviews/',

  // Web service port. You may have to change this to something like 8000 if you
  // don't have access to port 80 or it is in use. You can always override this
  // with a command line argument, hence "default".
  defaultPort: 80,

  // RethinkDB configuration. We use a connection pool, so you can add
  // additional servers to the array if needed.
  dbServers: [
    {
      host: "localhost",
      port: 28015
    }
  ],
  dbName: "libreviews",
  dbUser: "admin",
  dbPassword: "",

  // The secret used to sign the session cookie. Should be changed for
  // production environments.
  sessionSecret: "joeyTheCanadianStoreOwner",

  // Set your admin email if you want to request an HTTPS certificate
  adminEmail: "customizeforhttps@notavalidaddress",

  // Should normally not need to be changed
  httpsPort: 443,

  // You'll need a valid domain if you want HTTPS to work
  httpsDomains: ["dev.lib.reviews"],

  // How many minutes (!) should a session cookie last. Default = 30 days.
  sessionCookieDuration: 43200,

  // If you want to see blog posts from a certain team on the front page,
  // include the team ID here for now.
  frontPageTeamBlog: "",

  // Message key for the front page blog
  frontPageTeamBlogKey: "development diary",

  // These are simple question/answer text captchas which can be enabled
  // for supported forms (currently just sign-ups). The keys refer to
  // the message files in locales/ and are deliberately generic so we can
  // provide culturally appropriate customizations if needed.
  questionCaptcha: {
    forms: {
      register: true
    },
    captchas: [
      {
        questionKey: "question: famous painting",
        answerKey: "answer: famous painting"
      },
      {
        questionKey: "question: famous composer",
        answerKey: "answer: famous composer"
      },
      {
        questionKey: "question: famous scientist",
        answerKey: "answer: famous scientist"
      }
    ]
  }
}
