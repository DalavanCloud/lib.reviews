{"version":3,"sources":["db-fixture.js"],"names":[],"mappings":"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","file":"db-fixture-es5.js","sourcesContent":["'use strict';\n\nimport { exec, spawn } from 'child-process-promise';\nimport { logNotice, logOK } from '../helpers/test-helpers-es5';\nimport chalk from 'chalk';\nimport path from 'path';\n\nclass DBFixture {\n\n  constructor() {\n    this.loaded = false;\n    this.dbLog = [];\n    this.models = [];\n    // Sanitize name\n    let dbName = 'rethinkdb_data_' + process.env.NODE_APP_INSTANCE.replace(/[^a-zA-Z0-9]/g, '_');\n    this.filename = path.join(__dirname, dbName);\n  }\n\n  async bootstrap(models) {\n\n    process.env.NODE_CONFIG_DIR = path.join(__dirname, '../../config');\n\n    logNotice(`Loading config for instance ${process.env.NODE_APP_INSTANCE} from ${process.env.NODE_CONFIG_DIR}.`);\n\n    const config = require('config');\n\n    logNotice('Starting up RethinkDB.');\n\n    this.dbProcess = spawn('rethinkdb', ['-d', this.filename, '--driver-port', String(config.dbServers[0].port), '--cluster-port', String(config.dbServers[0].port + 1000), '--no-http-admin']).childProcess;\n\n    try {\n      await this.dbReady();\n    } catch (error) {\n      console.log(chalk.red('RethinkDB exited unexpectedly.'));\n      if (this.dbLog.length) {\n        console.log('It had the following to say for itself:');\n        console.log(this.dbLog.join('\\n'));\n      }\n      process.exit();\n    }\n    this.db = require('../../db');\n    logOK('Database is up and running.');\n    logNotice('Loading models.');\n    let readyPromises = [];\n    for (let m of models) {\n      this.models[m.name] = require(`../../models/${m.file}`);\n      readyPromises.push(this.models[m.name].ready());\n    }\n    logNotice('Waiting for tables and indices to be created by Thinky.');\n    // Tables need to be created\n    await Promise.all(readyPromises);\n    logOK('Ready to go, starting tests. ðŸš€\\n');\n    this.loaded = true;\n  }\n\n\n  async cleanup() {\n    logNotice('Killing test database process.');\n    await this.killDB();\n    logNotice('Cleaning up.');\n    try {\n      await exec(`rm -rf ${this.filename}`);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  dbReady() {\n    return new Promise((resolve, reject) => {\n      this.dbProcess.stdout.on('data', buffer => {\n        let str = buffer.toString();\n        this.dbLog.push(str);\n        if (/Server ready/.test(str))\n          resolve();\n      });\n      this.dbProcess.stderr.on('data', buffer => {\n        let str = buffer.toString();\n        this.dbLog.push(str);\n      });\n      this.dbProcess.on('close', reject);\n    });\n  }\n\n  killDB() {\n    return new Promise((resolve, reject) => {\n      this.dbProcess.on('close', resolve);\n      this.dbProcess.on('error', reject);\n      this.dbProcess.kill();\n    });\n  }\n\n\n}\n\nmodule.exports = new DBFixture();\n"]}